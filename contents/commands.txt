BASICO GIT E GITHUB


1. git init - Inicializa um repositório Git.

   git init


2. git add - Adiciona arquivos ao staging area.

   git add <file>
   git add .


3. git status - Mostra o estado do repositório.
  
   git status

   
4. git commit - Salva as mudanças.
   
   git commit -m "Mensagem"
   git commit -am "Mensagem"


5. git clone - Clona repositório remoto.

   git clone url


6. git push


7. git config - Configura o git

   git config --system - o git fica para o pc
   git config --global - o git fica fica para cada usuario
   git config --local - o git fica para cada projeto

   ex:
   git config --global user.name/user.email/core.editor/-l


8. git restore - Restaura o arquivo modificado

   git restaure <file>
   git restaure --staged <file> - Remove do stage, mas mantém as alterações locais.
   git restaure . - Restaura todos


9. git rm - Remove o arquivo

   git rm <file> 


10. git log - Mostra os commits realizados


11. git checkout - Navega pelos commits

   git checkout <hash> - Navega pelos commits passados
   git checkout master - Volta ao atual


12. git push - Envia para o GitHub


13. git pull - Baixa do GitHub


BRANCHES


1. git branch - inicia nova branch

   git branch nome da branch - inicia nova branch com nome
   git branch - mostra as branchs existentes no repositorio


2. git checkout - pode navegar entre as branchs

   git checkout nome da branch - navega entre as branchs atraves do nome
   git checkout master - volta para a branch master


3. git merge - mescla as branchs

   git merge <nome da branch q deseja juntar> 

   precisa estar na branch q ira receber os arquivos; 
   colocar o nome da q vai enviar no comando;


4. git log --graph - mostra os commits de forma mais clara

   git log --graph --oneline - deixa mais simples


5. git branch -d <nome da branch> - deleta a branch


6. git checkout -b <nome da branch>
   
   shorthand para criar a branch;
   e entrar nela no mesmo comando;


7. git push origin <nome da branch> - sobe as alterações na branch desejada


ISSUES


1. git commit -m "mensagem #numero da issue" - junta o commit com o historico da issue


2. git commit -m "mensagem closes #numero da issue" - github faz o commit e encerra a issue


3. git commit -m "mensagem fixes #numero da issue" - github faz o commit e encerra a issue dizendo que consertou os bugs


